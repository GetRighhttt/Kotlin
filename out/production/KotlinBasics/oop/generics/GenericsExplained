What are Generics?

Generics - a feature that allow us to define classes, methods and properties which are accessible using different
data types while keeping a check on the compile-time type safety. Generics allow developers the ability to create
classes and methods that can be used by numerous data types, and also custom types. Generics aid in library and
framework creation, and are quite literally one of the most useful features of almost every programming language in
my personal opinion.

What is Variance?

Variance - a feature that allows for the specification of type parameters where they can be used in a very specific
context; it explains which context the generic type should be used in and for.

Producer -> only returns some values
Consumer -> only consumes some values

InVariant - can be consumed and produced
CoVariant(out) - can only be produced; used as a return type
ContraVariant(in) - can only be used as an input; used as a declaration only

Covariant types mean that subtyping is preserved, meaning a child is a subtype of a parent, whereas Invariant means
the Parent is a subtype of the Child. Invariant accepts both values and is just denoted usually by "T".