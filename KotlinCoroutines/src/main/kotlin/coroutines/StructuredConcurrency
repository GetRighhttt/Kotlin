What is Concurrency?

- Concurrency is when multiple tasks run simultaneously while acting on a single core processing unit.
Usually when working with threads, when tasks run in parallel, they do so on multiple core processing units.
Concurrency alleviates that by running on a single processing unit, yet still allowing multiple tasks to run at the
same time, but not necessarily in parallel.

Multithreading Examples(Main types):
Sequential -> happening in a sequence.
Parallel -> happening in parallel with multiple core processing units.
Concurrent -> happening simultaneously with one single core processing unit.

What is Structured Concurrency?

- Structured Concurrency aims to improve the readability and ease of use when working with asynchronous tasks and
programming. It's the idea that new coroutines can only be launched within a Coroutine Scope which determines the
lifetime of the coroutine. It's when a parent coroutine has child coroutines, and there exists a relationship between the two that has certain constraints.
It basically encompasses the ideology of inheritance, but for concurrency.

Here are the rules that constraints that arise when using Structured Concurrency:
A. Children inherit context from their parent;
B. If a child coroutine raises an error, the parent coroutine also has an error;
C. When a parent is canceled, it's children are also canceled; and
D. A parent coroutine suspends until all of its children have finished their tasks.