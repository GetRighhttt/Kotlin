Why Functional programming?

Functional programming has really emerged significantly recently and that is due to the
need for parallel code in our programs. We no longer can just increase CPU performance and speed,
so instead we have optimized functional programming and Kotlin does a fantastic job of this. The
functional programming paradigm is very good at parallelize code.

Functional programming is seen more in declarative programming rather than imperative, which could also
contribute to the recent rise in usage from almost all the other languages in the world today.

Some key factors of functional programming to remember:
    a. safer
    b. easier to test
    c. increases CPU performance with concurrency
    d. easier to reason

Functions as Values
    a. accept functions as values
    b. return functions
    c. store functions as values
    d. put functions inside of collections

Commandments of Functional Programming:

1. Favor Immutability over Mutability
2. Use Nullability safely
3. Get the most out of classes and object:
    a. Use Data classes for value classes, DTO, config classes, etc.
    b. Use regular Classes for Services
    c. Use sealed classes for exhaustive checks, etc.
    d. Use available extensions
4. Create your own extensions within reason
5. Use WHEN when needed
6. Use Expressions
7. Favor functional collections over for loops
8. Use Scope functions
9. Use Coroutines
10. Use all idioms




