Kotlin DataStructures

By default, all of the data structures in Kotlin are immutable, meaning they cannot be changed or modified.
In order for use to be able to modify an existing data structure, we have to declare a data structure as
"mutable". Example:

val newData = mutableListOf()

There are also alternative datastructures built in to the Kotlin language that are able to be explored, however
we do not discuss them here. Just the most basic ones that we commonly see.

The exception to this mutability rule are arrays, which we can change and modify at runtime as we please.

Also, Kotlin is backwards compatible so it provides Sequences which were first introduced in Java 8.
The difference between Sequences and Collections is that Sequences are lazy, meaning they only initialize when
called. Collections typically perform operations on each collection regardless of the result, whereas Sequences
will only perform operations given the condition.