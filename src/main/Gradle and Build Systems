What is Gradle?

Well, in order to answer this question, we must first understand what a BUILD SYSTEM is.
We can think of "build systems" as principle ways to turn source code into something that our computer can execute.
But for the actual definition:
Build System - Software that automates the process of getting some kind of artifact (either an executable binary
or library) from the source.

Why do we have build systems?
Because Build Systems solve several issues:
    1. Configure your build for artifact generation(apk, jar, .exe, etc.)
    2. Unifying builds and logic re-use in various projects
    4. Dependency management
    4. Testing and Verification
    5. Incremental builds.

Some examples of build systems are Gradle, Maven, Apache, etc.

How do build systems work?
Sync code together into an executable that a computer can understand.
It takes source code, converts it into an intermediate form, and then to an executable.

Where does Gradle come in?

Gradle is a build system that combines both imperative and declarative ways of describing builds using general
purpose programming languages for configuration.
Gradle also uses a coordinate approach as well for dependency management.
Gradle can be used with various platforms, mainly JVM, JavaScript, and C++.
This means that Gradle is very flexible and capable to handle numerous types.

Some gradle files:

    1. gradlew{.bat} or gradle/wrapper or gradlew - stores local copy of specific gradle build system version.
    Makes builds run independently of operating system.
    2. gradle.properties - stores key/value pairs of configuration parameters for your build. Might store kotlin version,
    compose versions, keys, etc. in this file.
    3. settings.gradle - used to configure the build system itself.
    4. build.gradle{.kts} - main file which describes how your gradle project should be built. Usually house all the
    configurations for that project are housed.

Gradle has Transitive Dependencies which essentially just means your dependencies are handled by the build system.